import secrets
import sqlite3
from dataclasses import dataclass
from typing import Optional

import argon2
from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305


@dataclass
class UnAuthData:
    username: str
    master_password: str

    def __init__(self, username: str, master_password: str) -> None:
        self.username = username
        self.master_password = master_password


# FIX: fix this later key cant be none but this works fine cause function is not failing
@dataclass
class AuthenticatedData:
    username: str
    key: Optional[bytes]

    def __init__(self, username: str, key: Optional[bytes]) -> None:
        self.username = username
        self.key = key


@dataclass
class Entry:
    url: str
    password: bytes

    def __init__(self, url: str, password: str) -> None:
        self.url = url
        self.password = password.encode()


### Unauth Funtions :(


### this funtion get username and password
### then create salt(random bytes) and a hash for password using argon2
### save them in the sqlite3 database
def register_user(connection, data: UnAuthData) -> bool:
    salt = secrets.token_bytes(16)
    password_hash = argon2.PasswordHasher().hash(data.master_password)

    try:
        with connection as conn:
            conn.execute(
                "INSERT INTO users (username, password_hash, salt) VALUES (?, ?, ?)",
                (data.username, password_hash, salt),
            )
            return True

    except sqlite3.IntegrityError as e:
        print(e)
        return False


### this funtion get username and passwod
### then search the sqlite3 database for the user and if found
### verify the password hash matches given password and if matches create a new
### key for to encrypt the child items ( passwords, sites under given user) else
### if given user not found exit the program and if passwod doesnot match give a err
def authenticate_user(connection, data: UnAuthData) -> Optional[bytes]:
    with connection as conn:
        cursor = conn.execute(
            "SELECT password_hash, salt FROM users WHERE username = ?",
            (data.username,),
        )
        result = cursor.fetchone()

        if not result:
            print("User not found!")
            return

        stored_hash, salt = result

        try:
            argon2.PasswordHasher().verify(stored_hash, data.master_password)
            return derive_key(data.master_password, salt)

        except argon2.exceptions.VerifyMismatchError as err:
            print(err)


### create a new key for child items
### part of the above authenticate_funtion.
def derive_key(master_password: str, salt: bytes):
    hasher = argon2.low_level.hash_secret_raw(
        secret=master_password.encode(),
        salt=salt,
        time_cost=3,
        memory_cost=65536,
        parallelism=4,
        hash_len=32,
        type=argon2.low_level.Type.ID,
    )
    return hasher


### auth funtions :)


### this funtino get site and password and encrpt then in chcacha algorithm and store
### them in the sqlite3 database
### nonce is randomly generated bytes strem that protects passwords on ranbow password table attacks
def add_password(connection, data: AuthenticatedData, entry: Entry) -> None:
    if not data.key:
        return

    nonce = secrets.token_bytes(12)
    cipher = ChaCha20Poly1305(data.key)

    encrypted_password = cipher.encrypt(nonce, entry.password, None)

    with connection as conn:
        conn.execute(
            "INSERT INTO passwords (username, site, encrypted_password, nonce) VALUES (?, ?, ?, ?)",
            (data.username, entry.url, encrypted_password, nonce),
        )
    return


### get the password for the site from sqlite database and decrept them
### and show them
def get_password(connection, data: AuthenticatedData, site: str) -> Optional[list]:
    if not data.key:
        return

    with connection as conn:
        cursor = conn.execute(
            "SELECT id, site, encrypted_password, nonce FROM passwords WHERE username = ? AND site LIKE ?",
            (data.username, f"%{site}%"),
        )

        result = cursor.fetchall()

        if not result:
            return
        return [
            (
                id,
                site,
                ChaCha20Poly1305(data.key).decrypt(nonce, encrypted_password, None),
            )
            for id, site, encrypted_password, nonce in result
        ]


### get the passwords of all the sites from sqlite database and decrept them
### and show them
def list_passwords(connection, data: AuthenticatedData) -> Optional[list]:
    if not data.key:
        return

    with connection as conn:
        cursor = conn.execute(
            "SELECT site, encrypted_password, nonce FROM passwords WHERE username = ?;",
            (data.username,),
        )

        result = cursor.fetchall()
        if not result:
            return

        return [
            (
                site,
                ChaCha20Poly1305(data.key)
                .decrypt(nonce, encrypted_password, None)
                .decode("utf-8"),
            )
            for site, encrypted_password, nonce in result
        ]


def delete_passwod(
    connection,
    data: AuthenticatedData,
    site_id: str,
) -> None:
    if not data.key:
        return

    with connection as conn:
        conn.execute(
            "DELETE FROM passwords WHERE id = ? ",
            (site_id,),
        )
